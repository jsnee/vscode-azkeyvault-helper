{"version":3,"sources":["../webpack/bootstrap","../external \"vscode\"",".././src/KeyVaultHelper.ts",".././src/extension.ts",".././src/ExtensionCommands.ts",".././src/ui/secretExplorerProvider.ts",".././src/ExtensionSettings.ts",".././src/ui/KeyVaultTreeItem.ts",".././src/ui/KeyVaultSecretTreeItem.ts","../external \"child_process\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","KeyVaultHelper","listSecrets","vaultName","results","buf","execSync","console","log","toString","secretsStr","secrets","JSON","parse","length","secret","push","getSecret","secretName","parseKeyValueSecret","matches","match","resultMatches","result","each","eachMatches","stringify","context","window","createTreeView","treeDataProvider","secretExplorerProvider","getSecretsisposable","commands","registerCommand","ExtensionCommands","getAllSecrets","subscriptions","refreshDisposable","refresh","showSecretDisposable","showSecret","item","getSecretValue","doc","workspace","openTextDocument","content","showTextDocument","ViewColumn","Active","this","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","event","element","Promise","resolve","getTreeItem","then","contextValue","getContextValue","undefined","getChildren","keyVaults","ExtensionSettings","keyvaults","vault","KeyVaultTreeItem","fire","getConfiguration","val","update","_vaultName","TreeItem","TreeItemCollapsibleState","Collapsed","KeyVaultSecretTreeItem","secretAttributes","id","_name"],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = require(\"vscode\");","import { SecretAttributes } from \"@azure/keyvault-secrets\";\r\nimport { execSync } from \"child_process\";\r\n\r\nexport namespace KeyVaultHelper {\r\n    export function listSecrets(vaultName: string): SecretAttributes[] {\r\n        let results: SecretAttributes[] = [];\r\n        let buf = execSync(`az keyvault secret list --vault-name \"${vaultName}\"`);\r\n        console.log(buf.toString());\r\n        let secretsStr = buf.toString();\r\n        if (secretsStr) {\r\n            let secrets = JSON.parse(secretsStr) as SecretAttributes[];\r\n            if (secrets.length) {\r\n                for (let secret of secrets) {\r\n                    results.push(secret);\r\n                }\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n\r\n    export function getSecret(vaultName: string, secretName: string): any {\r\n        let buf = execSync(`az keyvault secret show --vault-name \"${vaultName}\" --name \"${secretName}\"`);\r\n        let secretsStr = buf.toString();\r\n        if (secretsStr) {\r\n            return JSON.parse(secretsStr);\r\n        }\r\n    }\r\n\r\n    export function parseKeyValueSecret(value: string): string {\r\n        let matches = value.match(/^['\"]((?:[^\\s=]+=[^\\s]+ )*[^\\s=]+=[^\\s]+)['\"]$/);\r\n        if (matches && matches.length) {\r\n            let val = matches[1];\r\n            let resultMatches = val.match(/([^\\s=]+)=([^\\s]+)/g);\r\n            if (resultMatches) {\r\n                let result: any = {};\r\n                for (let each of resultMatches) {\r\n                    let eachMatches = each.match(/^([^\\s=]+)=([^\\s]+)$/);\r\n                    if (eachMatches) {\r\n                        result[eachMatches[1]] = eachMatches[2];\r\n                    }\r\n                }\r\n                return JSON.stringify(result, null, 4);\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n}","import { ExtensionCommands } from './ExtensionCommands';\nimport { ExtensionContext, window, commands } from 'vscode';\nimport { secretExplorerProvider } from './ui/secretExplorerProvider';\n\nexport function activate(context: ExtensionContext) {\n    const treeView = window.createTreeView('azkeyvaulthelper', { treeDataProvider: secretExplorerProvider });\n    let getSecretsisposable = commands.registerCommand(\"azkeyvaulthelper.getSecrets\", ExtensionCommands.getAllSecrets);\n    context.subscriptions.push(getSecretsisposable);\n\n    let refreshDisposable = commands.registerCommand(\"azkeyvaulthelper.refresh\", secretExplorerProvider.refresh, secretExplorerProvider);\n    context.subscriptions.push(refreshDisposable);\n\n    let showSecretDisposable = commands.registerCommand(\"azkeyvaulthelper.showSecret\", ExtensionCommands.showSecret);\n    context.subscriptions.push(showSecretDisposable);\n}\n\nexport function deactivate() {}\n","import { window, workspace, ViewColumn } from \"vscode\";\r\nimport { ITreeItem } from \"./ui/ITreeItem\";\r\nimport { KeyVaultHelper } from \"./KeyVaultHelper\";\r\n\r\nexport namespace ExtensionCommands {\r\n    \r\n    export async function getAllSecrets(): Promise<void> {\r\n    }\r\n\r\n    async function promptVaultName(): Promise<string | undefined> {\r\n        return await window.showInputBox({ placeHolder: \"Vault Name\" });\r\n    }\r\n\r\n    export async function showSecret(item?: ITreeItem): Promise<void> {\r\n        if (item && item.getSecretValue) {\r\n            const doc = await workspace.openTextDocument({\r\n                content: item.getSecretValue()\r\n            });\r\n            await window.showTextDocument(doc, ViewColumn.Active);\r\n        }\r\n    }\r\n}","import { Event, TreeDataProvider, EventEmitter, TreeItem } from \"vscode\";\r\nimport { ITreeItem } from \"./ITreeItem\";\r\nimport { ExtensionSettings } from \"../ExtensionSettings\";\r\nimport { KeyVaultTreeItem } from \"./KeyVaultTreeItem\";\r\n\r\nclass SecretExplorerProvider implements TreeDataProvider<ITreeItem> {\r\n    public readonly onDidChangeTreeData: Event<ITreeItem>;\r\n    private _onDidChangeTreeData: EventEmitter<ITreeItem>;\r\n\r\n    constructor() {\r\n        this._onDidChangeTreeData = new EventEmitter<ITreeItem>();\r\n        this.onDidChangeTreeData = this._onDidChangeTreeData.event;\r\n        this.refresh();\r\n    }\r\n    \r\n    public getTreeItem(element: ITreeItem): TreeItem | Thenable<TreeItem> {\r\n        return Promise.resolve(element.getTreeItem()).then(item => {\r\n            item.contextValue = element.getContextValue();\r\n            return item;\r\n        });\r\n    }\r\n\r\n    public async getChildren(element?: ITreeItem): Promise<ITreeItem[] | null | undefined> {\r\n        if (element === undefined) {\r\n            const keyVaults = ExtensionSettings.keyvaults;\r\n            if (keyVaults && keyVaults.length) {\r\n                let results: KeyVaultTreeItem[] = [];\r\n                for (let vault of keyVaults) {\r\n                    results.push(new KeyVaultTreeItem(vault));\r\n                }\r\n                return results;\r\n            }\r\n        } else {\r\n            return element.getChildren && element.getChildren();\r\n        }\r\n    }\r\n\r\n    public refresh(item?: ITreeItem): void {\r\n        this._onDidChangeTreeData.fire(item);\r\n    }\r\n}\r\n\r\nexport const secretExplorerProvider = new SecretExplorerProvider();","import { workspace } from \"vscode\";\r\n\r\nclass Settings {\r\n    public get keyvaults(): string[] | undefined {\r\n        return workspace.getConfiguration('azkeyvaulthelper').get('keyvaults');\r\n    }\r\n\r\n    public set keyvaults(val: string[] | undefined) {\r\n        workspace.getConfiguration('azkeyvaulthelper').update('keyvaults', val);\r\n    }\r\n\r\n    public async updateKeyvaults(val: string[] | undefined): Promise<void> {\r\n        return await workspace.getConfiguration('azkeyvaulthelper').update('keyvaults', val);\r\n    }\r\n}\r\n\r\nexport const ExtensionSettings: Settings = new Settings();","import { ITreeItem } from \"./ITreeItem\";\r\nimport { TreeItem, TreeItemCollapsibleState } from \"vscode\";\r\nimport { KeyVaultSecretTreeItem } from \"./KeyVaultSecretTreeItem\";\r\nimport { KeyVaultHelper } from \"../KeyVaultHelper\";\r\n\r\nexport class KeyVaultTreeItem implements ITreeItem {\r\n    private _vaultName: string;\r\n\r\n    constructor(vaultName: string) {\r\n        this._vaultName = vaultName;\r\n    }\r\n\r\n    public getContextValue(): string {\r\n        return \"KeyVault\";\r\n    }\r\n\r\n    public getTreeItem(): TreeItem | Thenable<TreeItem> {\r\n        return new TreeItem(this._vaultName, TreeItemCollapsibleState.Collapsed);\r\n    }\r\n\r\n    public getChildren(): ITreeItem[] {\r\n        let results: KeyVaultSecretTreeItem[] = [];\r\n        for (let secret of KeyVaultHelper.listSecrets(this._vaultName)) {\r\n            results.push(new KeyVaultSecretTreeItem(this._vaultName, secret));\r\n        }\r\n        return results;\r\n    }\r\n}","import { ITreeItem } from \"./ITreeItem\";\r\nimport { TreeItem } from \"vscode\";\r\nimport { SecretAttributes } from \"@azure/keyvault-secrets\";\r\nimport { KeyVaultHelper } from \"../KeyVaultHelper\";\r\n\r\nexport class KeyVaultSecretTreeItem implements ITreeItem {\r\n    private _name: string;\r\n    private _vaultName: string;\r\n\r\n    constructor(vaultName: string, secretAttributes: SecretAttributes) {\r\n        if (secretAttributes.id && !secretAttributes.name) {\r\n            let matches = secretAttributes.id.match(/secrets\\/(.*)$/);\r\n            if (matches) {\r\n                this._name = matches[1];\r\n            } else {\r\n                this._name = secretAttributes.name;\r\n            }\r\n        } else {\r\n            this._name = secretAttributes.name;\r\n        }\r\n        this._vaultName = vaultName;\r\n    }\r\n\r\n    public getContextValue(): string {\r\n        return \"KeyVaultSecret\";\r\n    }\r\n\r\n    public getTreeItem(): TreeItem | Thenable<TreeItem> {\r\n        return new TreeItem(this._name);\r\n    }\r\n\r\n    public getSecretValue(): string {\r\n        let secret = KeyVaultHelper.getSecret(this._vaultName, this._name);\r\n        if (secret) {\r\n            return secret.value;\r\n        }\r\n        return \"\";\r\n    }\r\n}","module.exports = require(\"child_process\");"],"sourceRoot":""}